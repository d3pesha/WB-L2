package main

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

// объект магазина
type Shop struct {
}

func (s *Shop) Available() bool {
	return true
}

func (s *Shop) Sell() {

}

func (s *Shop) CheckOrder() {
}

// объект склада
type Storehouse struct {
}

func (s *Storehouse) Available() bool {
	return true
}

func (s *Storehouse) CheckItems() {

}

type Facade struct {
	S Shop
	H Storehouse
}

func NewFacade() *Facade {
	return &Facade{
		S: Shop{},
		H: Storehouse{},
	}
}

func (f *Facade) Sell() {
	if f.S.Available() || f.H.Available() {
		f.S.Sell()
	}
}

func (f *Facade) Available() bool {
	return f.S.Available() || f.H.Available()
}

/*
Фасад — это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов,
библиотеке или фреймворку.

## Преимущества и недостатки
+  Изолирует клиентов от компонентов сложной подсистемы.
-  Фасад рискует стать объектом, привязанным ко всем классам программы.

## Применимость
 Когда вам нужно представить простой или урезанный интерфейс к сложной подсистеме.
 Когда вы хотите разложить подсистему на отдельные слои.
 Фасад содержит в себе объект(ы) имеющий сложную логику. Используя методы объекта в своих собственных, Фасад упрощает работу с ними. Можно сократить до одной функции фасада
 Это как надстройка над сложным объектом, которая в своих методах использует по несколько методов сложного объекта
*/
